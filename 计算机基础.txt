一、数据的表示
    1、进制转换
        如果有一数为x^n，我们称x为基数，n为位权。
        （1）其他进制转换十进制（按权展开法）
            在按权展开时，小数点左起第一位为x^0，小数点右起第一位为x^-1。
            如二进制1011.11转为十进制，
                整数部分：1*2^3 + 0*2^2 + 1*2^1 + 1*2^0 = 11
                小数部分：1*(2^-1) + 1*(2^-2) = 0.75
                因此该数的十进制为11.75
        （2）十进制转换其他进制（短除法/除基取余法，短乘法/乘基取整法）
            如十进制11.75转为二进制，
                整数部分（短除法/除基取余法）：
                    11 / 2 = 5 余 1
                    5  / 2 = 2 余 1
                    2  / 2 = 1 余 0
                    1  / 2 = 0 余 1
                    则整数部分的二进制为，余数从下往上1011
                小数部分（短乘法/乘基取整法）：
                    0.75 * 2 = 1.5 取整 1
                    0.5  * 2 = 1   取整 1
                    则小数部分的二进制为，整数从上往下11
                因此该数的二进制为1011.11
                注意有时候小数是乘不尽的，此时只需要根据精度进行舍去即可，也就是说这些数是无法准确的用二进制进行表示的，然而计算机底层硬件的计算就是用二进制进行计算的，这也是为什么计算机中的浮点数计算会存在精度误差的问题（当然也有其他的问题，比如浮点数的对阶导致尾数移动从而精度丢失等）。
        （3）二进制与八进制、十六进制互相快速转换（三位一组，四位一组，不足补0，采用8421码快速计算）
            二进制：1010    
            八进制（三位一组）：001 010 -> 12 -> 001 010
            十六进制（四位一组）：1010 -> A -> 1010
    2、码制
        （1）原码
            最高位是符号位，其余低位表示数值的绝对值。
        （2）反码
            正数的反码与原码相同，负数的反码是其绝对值按位取反（符号位不变）。
        （3）补码
            正数的补码与原码相同，负数的补码是其反码的结果加1（符号位不变）。
        （4）移码
            补码的符号位取反。
        注：
            （1）计算机在计算的时候都是用补码进行计算的。
            （2）定点整数（纯整数，无小数）的补码、移码中类似于“1000 0000为最小负数-128而不是-0”这类是人为规定的，也是因为这个原因所以原码、反码的数码个数要比补码、移码的数码个数少1。
            （3）定点小数（纯小数，无整数）的补码、移码中类似于“1000 0000为最小负数-1而不是-0”这类是人为规定的，也是因为这个原因所以原码、反码的数码个数要比补码、移码的数码个数少1。
                数值1       数值-1      数值1 + 数值-1   定点整数范围                   定点小数范围                     数码个数
        原码    0000 0001   1000 0001   1000 0010       -(2^(n-1)-1)到+(2^(n-1)-1)    -(1-2^-(n-1))到+(1-2^-(n-1))    2^n-1
        反码    0000 0001   1111 1110   1111 1111       -(2^(n-1)-1)到+(2^(n-1)-1)    -(1-2^-(n-1))到+(1-2^-(n-1))    2^n-1
        补码    0000 0001   1111 1111   0000 0000       -2^(n-1)到+(2^(n-1)-1)        -1到+(1-2^-(n-1))               2^n
        移码    1000 0001   0111 1111   1000 0000       -2^(n-1)到+(2^(n-1)-1)        -1到+(1-2^-(n-1))               2^n
    3、浮点数
        （1）浮点数表示
            定点整数是全为整数的数；定点小数是全为小数的数；那么浮点数就是即包含整数，又包含小数的数，表示为N = 尾数 * 基数 ^ 阶码。
            ① 一般尾数用补码表示，阶码用移码表示，但是在IEEE754标准中，尾数也可以用原码表示。
            ② 阶码的位数决定数的表示范围，位数越多范围越大。
            ③ 尾数的位数决定数的有效精度，位数越多精度越高。
            ④ 对阶时，一般都是小阶向大阶对齐，因为如果是大阶向小阶对齐，那么势必会导致大阶尾数向左移动，可能会导致最高位丢失，如果反过来则是小阶尾数向右移动，如果丢失也丢失的是最低位，这样误差会小一点。
            ⑤ 对阶是通过小阶的位数右移实现的，如果有符号位，则符号位保持不变，这也叫算术右移。
        （2）运算过程
            对阶（一般小阶向大阶对齐） -> 尾数计算 -> 结果规格化
            规格化：
                直白的来说就是要保证二进制表示时，0.5<=尾数的十进制值要<1（也就是二进制0.11....这种，小数点前只有一位而且是符号位，小数点后面第一位必须要是1），这个作用是为了保证在存储空间不变的前提下尽可能的提高浮点数表示的精度，计算机中是用二进制来存储浮点数的，尾数的存储位数是有限的，如果高位都是0这种属于无效位，反而可能会因为高位存了0，导致后面没有位数来存储本该是低位的数据，从而丢失了，如果也是0那没关系，如果不是0，那就属于精度丢失，这个时候就要用到规格化进行尾数左规，也就是左移，每左移一位阶码就要对应的减1。
    4、逻辑运算
        算术运算符：+，-，*，/
        关系运算符：<，<=，>，>=，==，!=
        赋值运算符：=
        逻辑运算符：
            逻辑与&&，AND（两个都为真才为真）
            逻辑或||，OR（两个中有一个为真就为真）
            逻辑非!，NOT（逻辑值取反）
            逻辑异或⊕，XOR（两个相同为假，不同为真）
        优先级：
            非 > 算术运算符 > 关系运算符 > 与 > 或 > 赋值运算符
        短路原则：
            在逻辑表达式的计算中，并不是所有的逻辑运算符都要被执行。
            （1）a&&b&&c，只要a为假，不会计算后面的值。
            （2）a||b||c，只要a为真，不会计算后面的值。
二、校验码
    计算机中数据的传递是通过二进制数据传递的，如果我们事先知道的某些数据位是出错的，那么我们就可以通过出错的数据位取反来实现纠错。
    码距：任何一种编码都是由许多码字构成，任意两个码字之间最少变化的二进制位数，就称为数据校验码的码距。比如两位二进制可以有{00,01,10,11}这四种码字，码距为最少变化为2。
    1、奇偶校验码
        可以检查“奇数个数据位”出错，但是不可以纠错。
        奇校验：整个信息（信息位拼接校验位）中“1”的个数为奇数。
        偶校验：整个信息（信息位拼接校验位）中“1”的个数为偶数。
        比如男0 女1，举例奇校验信息拼接校验码后就是男10，女01，如果接收到的消息为男00，女11就可以知道数据发生了错误，但是如果接收到的消息为男01，女10，这种情况数据出现了错误但是奇校验无法识别；偶校验同理。
    2、CRC循环冗余校验码
        可以检错，不可以纠错。
        CRC的编码方式是：在x位信息码之后拼接y位校验码。校验码的位数由生成多项式决定，这个多项式是发送方和接收方约定的。把接收到的CRC码用约定的生成多项式去除（模二除法），如果正确则余数为0，如果某一位出错，则余数不为0。不同的位数出错其余数不同，余数和出错位序号之间有唯一的对应关系。
    3、海明校验
        可以检错，也可以纠错。
        在信息位中加入几个校验位新城海明码，使码距比较均匀地扩大，并把海明码的每个二进制位分配到几个奇偶校验组中，当某一位出错后，就会引起有关的几个校验位的值发生变化，这不但可以发现错误，还能指出错误的位置，为自动纠错提供了依据。
        校验位求取公式 2^r>=m+r+1，其中m是信息位的个数，r是最少校验位的个数。
        假如需要传递的信息位是16位，若要使式子成立，则r>=5，即最少需要5位校验码，分别将校验码放到信息的2^0，2^1，2^2，2^3，2^4位上（也就是2的阶乘1 2 4 8 16 32...）。
    总结：
                        校验码位数              校验码位置          检错                       纠错    校验方式
    奇偶校验             1                      一般拼接在头部      可以检查“奇数个数据位”出错   不可以  参考上面
    CRC循环冗余校验      生成多项式最高次幂决定   拼接在信息尾部      可以检错                    不可以  模二除法求余数，拼接为校验位
    海明校验             2^r>=m+r+1             插入在信息位中间    可以检错                    可以    分组奇偶校验
三、CPU组成
    运算器：
        （1）算术逻辑单元ALU：数据的算术运算和逻辑运算。
        （2）累加寄存器AC：通用寄存器，为ALU提供一个工作区，用在暂存数据。
        （3）数据缓冲寄存器DR：写内存时，暂存指令或数据。
        （4）状态条件寄存器PSW：存状态标志与控制标志。（也可以属于控制器，有争议，归类时放在最后考虑）
    控制器：
        （1）程序计数器PC：存储下一条要执行指令的地址（每执行一条指令，计数器就加一，就是一段程序的每一条指令的地址）。
        （2）指令寄存器IR：存储即将执行的指令。
        （3）地址寄存器AR：存储当前CPU所访问的内存单元的地址（就是一段程序的头地址）。
        （4）指令译码器ID：对指令中的操作码字段进行分析解释。
        （5）时序部件：提供时序控制信号。
四、寻址方式
    （1）立即寻址方式：操作数直接放在指令中，速度快，灵活性差。（比如常量）
    （2）直接寻址方式：指令中存放的是操作数的地址。（比如变量）
    （3）间接寻址方式：指令中存放了一个地址，这个地址对应的内容是操作数的地址。（比如多级指针）
    （4）寄存器寻址方式：寄存器存放操作数。（存在寄存器的常量）
    （5）寄存器间接寻址方式：寄存器存放的是操作数的地址。（存在寄存器的变量，也可以是多级指针）
五、CISC与RISC
    CISC（复杂指令集）：指令数量多；使用频率差别大；可变长格式；支持多种寻址方式；使用微程序控制技术实现；研制周期长。
    RISC（精简指令集）：指令数量少；使用频率接近；定长格式；支持寻址方式少；增加了通用寄存器减少访存次数；用硬布线电路实现指令解码，快速完成指令译码；适合采用流水线；可以优化编译；有效支持高级语言。
六、流水线技术
    流水线是指在程序执行时，多条指令重叠进行操作的一种“准并行”处理实现技术。各种部件同时处理是针对不同指令而言的，它们可同时为多条指令的不同部分进行工作，以提高各部件的利用率和指令的平均执行速度。
    第一条指令执行的时间我们称为流水线建立时间。之后的每个指令完成的时间我们称为流水线周期，为拆分的所有步骤中执行时间最长的一段。
    （1）流水线执行时间理论公式：(t1+t2+...+tk) + (n-1)*t
    （2）流水线执行时间实践公式：k*t + (n-1)*t
    这里的k代表一条指令执行过程可以分解为k个步骤；t为流水线周期；n为流水线周期数。
    1、为什么会有理论公式和实践公式的区别？
        理论公式中的第一条指令每个步骤执行完成后会立刻接上第二条指令的对应步骤（如果满足执行条件），所以直接相加每个步骤的执行时间，但是实际中很显然不可能立刻接上，因为还涉及到指令寻址耗时等等所以会有冗余时间，所以就要取所有步骤中时间最长的一段作为每个步骤的时间，所以才会变成k*t。
    2、为什么流水线技术取所有步骤中执行时间最长的一段作为流水线周期？
        流水线技术就是上一个指令的第一个步骤执行完之后就会执行第二个指令的第一个步骤，如果此时第一个指令的第二个步骤执行时间小于第二个指令的第一个步骤，那么即便它执行完成也不会去立即去执行第二个指令的第二个步骤，必须空等直到第二个指令的第一个步骤执行完毕，这就是为什么流水线周期要取所有步骤中执行时间最长的一段（因为存在空等）。
    3、流水线吞吐率计算。
        流水线吞吐率是指在单位时间内流水线所完成的任务数量或输出的结果数量。
        基本公式为：TP = 指令条数 / 流水线执行时间。
        吞吐率公式为（吞吐率公式的时间用的是理论公式）：n / (t1+t2+...+tk) + (n-1)*t
        最大吞吐率公式为（最大吞吐率公式的时间用的是实践公式）：n / (k+n-1)*t 可以求个极限近似看为 1/t
七、存储系统
    1、层次化存储结构
        外存（辅存）：硬盘、光盘、U盘；速度最慢，容量最大，常见T级别。
        内存（主存）：随机存储器RAM、只读存储器ROM；速度较慢，容量较大，常见G级别。
        Cache：高速缓冲存储器；速度较快，容量较小，常见M级别。
        CPU：寄存器；速度最快，容量最小，常见bit级别。

        虚拟存储体系指的是内存和外存的组合。
        三级存储体系指的是内存和外存和Cache的组合。
        
        局部性原理是层次化存储结构的支撑。
        （1）时间局部性：如果一个内容近期被访问，那么在将来它可能再次被访问。体现在程序中的循环体。
        （2）空间局部性：如果一个内容被访问了，那么它附近的内容也可能很快被访问。体现在程序中的顺序结构，如数组。

        分类：
            （1）存储器位置
                内存和外存
            （2）存取方式
                按内容存储：
                    相联存储器（如Cache），相联存储器是一种不根据地址，而是根据存储内容来进行存取的存储器（注意不可以简单的理解为哈希存储）。
                按地址存储：
                    随机存储器：如内存。
                    顺序存储器：如磁带，不能跳，不能倒。
                    直接存储器：如磁盘，磁盘的读取分三步，①转臂定位，②延时等待，③读写，第一步就是随机存储，第二步就是顺序存储，它结合了两种类型。
            （3）工作方式
                随机存储器RAM：如内存（DRAM动态随机存储器，SRAM静态随机存储器），内容掉电会丢失。
                只读存储器ROM：如BIOS所在的主板上面的ROM芯片，内容掉电保留。注意硬盘HDD，或者固态硬盘SDD，它不属于ROM；另外现在有一种叫做EEPROM电可擦可编程只读存储器，这种ROM是允许写入的，这种擦除和写入都是有一定的寿命限制。
    2、Cache
        在计算机存储系统体系中，Cache是速度最快的（如果有寄存器，寄存器最快，寄存器是在CPU里面的，而Cache位于CPU和主存之间）。

        使用Cache改善系统性能的依据是程序的局部性原理，局部性原理参考“层次化存储结构”。

        如果访问的数据刚好在Cache中就叫缓存命中，否则就叫缓存未命中。
        
        平均周期时间的计算是通过加权平均值来求取的，即：
            缓存命中的概率 * Cache的周期时间 + 缓存未命中的概率 * 主存周期时间 = Cache+主存的平均周期时间

        地址映像是将主存与Cache的存储空间划分为若干大小相同的页（或称为块），然后把主存的页映射到Cache的页中。Cache和主存之间的地址映像是由硬件直接完成的。这种映射有三种形式：
            （1）直接相联映像：硬件电路较简单，但冲突率高，有点类似哈希映射的直接映射。
            （2）全相联映像：电路难于设计和实现，只适用于小容量的Cache，冲突率较低，有点类似哈希映射的线性探测。
            （3）组相联映像：直接相联和全相联的折中，有点类似分组过后，每组内进行哈希映射的线性探测。
    3、主存编址计算
        存储单元个数 = 最大地址 - 最小地址 + 1

        编制内容：
            按字编址：存储体的存储单元室字存储单元，也就是最小寻址单位是一个字。
            按字节编址：存储体的存储单元是字节存储单元，也就是最小寻址单位是一个字节。

        总容量 = 存储单元个数 * 编址内容

        根据存储器所要求的容量和选定的存储芯片的容量，就可以计算出芯片的总数，即：
            总片数 = 总容量 / 每片的容量
八、输入输出技术
    1、数据传输控制方式
        （1）程序控制方式：分为分为无条件传送和程序查询传送方式两种。方法简单，硬件开销小，但IO能力不高，严重影响CPU的利用率。
        （2）程序中断方式：与程序控制方式相比，中断方式因为CPU无需等待而提高了传输请求的响应速度。当IO系统准备好以后，发出中断信号通知CPU；CPU接收到中断信号后，保存正在执行程序的现场（现场信息保存在一个栈数据结构中），打断的程序当前位置即为断点；通过中断向量表（保存发出中断信号的服务程序的入口地址），转入IO中的服务程序的执行，完成IO系统的数据交换；返回被打断的程序继续执行。（鼠标和键盘使用的方式）
        （3）DMA方式：DMA是直接内存访问，是为了在主存和外设之间实现高速、批量数据交换而设置的。DMA方式不需要CPU执行程序指令来传送数据，比上述两种方式都高效。DMAC向总线裁决逻辑提出总线请求，CPU执行完当前总线周期即可释放总线控制权，此时DMA响应，通过DMAC通知IO接口开始DMA传输。（移动硬盘使用的方式）
        （4）通道方式
        （5）IO处理机
        从上往下效率越来越高。
九、总线系统
    一条总线同一时刻仅允许一个设备发送，但允许多个设备接受（分时双工）。
    并行总线适合近距离数据传输，串行总线适合长距离数据传输，总线因为是分时双工的特性，所以性能是没有全双工的性能高的，总线在设计上可以与连接设备实现最佳匹配。
    1、总线的分类
        （1）数据总线（DB）：在CPU和RAM之间来回传送需要处理或是需要储存的数据。
        （2）地址总线(AB)：用来指定在RAM中储存的数据的地址。
        （3）控制总线(CB)：将微处理器控制单元（CU）的信号传送到周边设备。
十、可靠性
    平均无故障时间（MTTF）：MTTF = 1 / 失效率。
    平均故障修复时间（MTTR）：MTTR = 1 / 修复率。
    平均故障间隔时间（MTBF）：MTTR + MTTF。
    系统可靠性：MTTF / (MTTR + MTTF) * 100%。
    在实际应用中，一般MTTR很小，所以通常认为MTBF≈MTTF。
    可靠性可以用MTTF / (1 + MTTF)来度量。
    串联系统可靠性是各模块的可靠性乘积。
    并联系统可靠性是1-各模块的不可靠性乘积。
十一、性能指标
    1、字长和数据通路宽度：字长是计算机一次能够读取的数据长度，如果考虑地址总线的字长，对于32个bit的字长能够表示的地址范围是2^32，也就是4个G的大小，也就是当主存为4G时一般用32位操作系统；数据通路宽度指的是数据总线一次能够通过的数据量。
    2、主存容量和存取速度：内存的大小和内存的读写速度，包括外设和内存的读写速度。
    3、主频与CPU时钟周期：主频是数据一秒钟在数据总线中通过的次数；CPU时钟周期是数据每一次通过数据总线所花费的时间；如果主频是2.4GHZ，那么时钟周期就是1/2.4GHZ。
    4、运算速度：CPI每条指令所占据的时钟周期；IPC每个时钟周期能够完成的指令条数；MIPS百万条指令每秒；MFLOPS百万个浮点数操作每秒。
    5、吞吐量与吞吐率：吞吐量表示每一个时间间隔所完成的任务量；吞吐率表示单位时间内所完成的任务量；当时间间隔是一个单位时间的时候，吞吐量和吞吐率的概念没有太大的区分。
    6、响应时间与完成时间：响应时间是请求提交后到完成请求的时间叫响应时间；完成时间是事务或者指令执行完成的时间。
    7、兼容性：软件考虑兼容性，开发软件时一般向下兼容操作系统。
十二、操作系统
    1、操作系统的作用
        应用程序-》系统程序-》操作系统-》计算机硬件（裸机）
        
        操作系统管理系统的硬件、软件、数据资源。
        操作系统控制程序运行。
        操作系统是人机交互的接口。
        操作系统是应用软件与硬件之间的接口。

        进程管理
        存储管理
        文件管理
        作业管理
        设备管理
    2、特殊的操作系统
        （1）批处理操作系统
            单道批：一次一个作业入内存，作业由程序、数据、作业说明书组成。
            多道批：一次多个作业入内存，多道、宏观上并行微观上串行。
        （2）分时操作系统
            采用时间片轮转的方式为多个用户提供服务，每个用户感觉独占系统，多路性、独立性、交互性和及时性。
        （3）实时操作系统
            实时控制系统和实时信息系统，交互能力要求不高，可靠性要求高（规定时间内响应并处理）。
        （4）网络操作系统
            方便有效共享网络资源，提供服务软件和有关协议的集合。主要的网络操作系统有Unix、Linux和Windows Server系统。
        （5）分布式操作系统
            任意两台计算机可以通过通信交换信息，是网络操作系统的更高级形式，具有透明性、可靠性和高性能等特性。
        （6）微机操作系统
            就是微型计算机也就是PC机，Windows、Linux。
        （7）嵌入式操作系统
            运行在智能芯片环境中，微型化、可定制（针对硬件变化配置）、实时性、可靠性、易移植性（体现在HAL和BSP支持）。
十三、进程
    1、进程/线程/协程的概念
        进程：是操作系统进行资源分配的基本单位。它有程序块、进程控制块（PCB，PCB是进程存在的唯一标志，内容包含进程标识符、状态、位置信息、控制信息、队列指针（链接同一状态的进程）、优先级、现成保护区等）和数据块三部分组成。进程是程序的一次执行过程，没有程序就没有进程，程序是一个静态的概念，而进程是一个动态的概念。
        
        线程：是CPU进行调度的基本单位。进程独立拥有资源，线程可以共享资源，可以共享内存地址空间、代码、数据、文件等，不会共享程序计数器、寄存器、栈等。每一个CPU的逻辑核心可以执行一个线程。一个进程可以包含多个线程。

        协程：协程也叫做微线程或纤程，协程运行在线程中，协程的调度完全由用户程序自行控制，称为用户级别的线程。在CPU多逻辑核心下，线程可以同时运行多个，但是协程只能运行一个，这既是因为协程运行在线程里，而线程是CPU调度的基本单位，又是因为协程设计上是通过协作来完成任务的，在任意时刻只有一个协程在运行，协程的调度显式的写在代码中，多个协程顺序执行完成任务。
    2、进程的状态
        （1）三态模型：
            运行状态：当一个进程得到CPU资源在CPU上运行时，CPU时间片到时会重回就绪状态，等待事件发生会变为阻塞状态。（单处理机处于运行态的进程只有一个）
            就绪状态：一个进程获得了除CPU资源以外的一切所需资源，一旦得到CPU资源即可运行。
            阻塞状态：也称等待或睡眠状态，一个进程正在等待某一个事件发生（例如请求IO，等待IO完成时）而暂时停止运行，此时即使把CPU资源分配给该进程也无法运行，故称进程处于阻塞状态，当等待事件完成时会变为就绪状态，等待CPU资源的分配。
        （2）五态模型：相对于三态模型主要是多了一个挂起和唤醒的操作。
            运行状态：可以通过挂起变为禁止就绪状态，可以通过CPU时间片到时变为活跃就绪状态，可以通过等待事件发生变为活跃阻塞状态。
            静止就绪状态：可以通过唤醒变为活跃就绪状态。
            活跃就绪状态：可以通过挂起变为禁止就绪状态，可以通过CPU调度变为运行状态。
            静止阻塞状态：可以通过等待事件完成变为静止就绪状态，可以通过唤醒变为活跃阻塞状态。
            活跃阻塞状态：可以通过等待事件完成变为活跃就绪状态，可以通过挂起变为静止阻塞状态。

            也就是
                通过挂起把活跃状态变为静止状态，通过唤醒把静止状态变为活跃状态；
                通过等待事件发生把就绪状态变为阻塞状态，通过等待事件完成把阻塞状态变为就绪状态；
                通过获得CPU资源把就绪状态变为运行状态，通过CPU时间片到时把运行状态变为就绪状态；
                另外，通过等待事件发生把运行状态变为活跃阻塞状态，通过挂起把运行状态变为静止就绪状态；

            挂起原因：
                ① 进程过多，主存资源不足，此时必须将某些进程挂起，放到磁盘对换区，暂时不参与调度以平衡系统负载。
                ② 系统出现故障，或者用户调试程序，也可能需要将进程挂起检查问题。
    3、进程的调度
        （1）PV操作的概念
            临界资源：在并发的情况下，进程间需要互斥方式访问的共享资源叫做临界资源。
            临界区：进程中访问临界资源的那段代码称为临界区。
            互斥：对于同一个资源，A访问时，B不能访问。
            同步：对于同一个资源，需要AB同时访问，但是AB的速度有差异，需要在一定情况下停下等待。

            信号量S是一种特殊的变量，在代码中是一个全局变量，信号量可以表示资源的数量，信号量为负数时还可以表示排队的进程数。
            P操作指的是加锁的过程P(S)，减信号量，判断，先s=s-1，然后判断s<0，为真则进入阻塞队列，为假则往下进行。
            V操作指的是解锁的过程V(S)，加信号量，判断，先s=s+1，然后s<=0，为真则唤醒阻塞队列中的进程，为假则往下进行。
            PV操作一定是成对出现的。
        （2）信号量与PV操作
            互斥模型：如多进程使用同一个打印机，A进程在使用打印机之前要对打印机资源进行P操作，使用完打印机之后再对打印机资源进行V操作。

            同步模型：如生产者、消费者、缓冲区，生产者将资源放到缓冲区之前要对“缓冲区的剩余空间S1”进行P操作，资源放到缓冲区之后再对“资源S2”进行V操作，消费者在从缓冲区获取资源之前要对“资源S2”进行P操作，从缓冲区获取资源之后再对“缓冲区的剩余空间S1”进行V操作。这里可以看出PV操作虽然是成对出现的，但是也可以跨代码段成对出现。

            互斥同步模型：如果上述的生产者消费者问题中，要求缓冲区同时只能被一个进程访问，那么此时就变成了互斥同步模型，相对于同步模型里的生产者消费者问题，就变成了生产者在生产的时候，消费者是不能消费的（即便消费者有足够的资源），那么就需要在生产者的资源放到缓冲区的操作前后分别对“缓冲区资源S3”进行PV操作，在消费者从缓冲区获取资源前后分别对“缓冲区资源S3”进行PV操作。
        （3）前趋图与PV操作
            前趋图指的是节点与节点之间有明显的先后关系的图，也就是有向无循环图，也就是拓扑图。

            有前驱节点的操作需要先通过P操作来检查前驱操作是否完成，前驱操作执行完成后通过V操作来通知后继节点来执行。这也是一个同步模型。
十四、死锁资源数计算
    死锁指的是两个以上的进程互相都要求对方已经占有的资源导致无法继续运行下去的现象。

    死锁四大条件：
        1、互斥:A和B互斥持有资源。
        2、持有和等待：A持有资源等待剩余的资源。
        3、不可剥夺：A无法剥夺B持有的资源。
        4、环路等待：A等B，B等A。

    如果要预防死锁，可以打破死锁的四大条件。比如：
        1、有序资源分配法：有序的分配资源，先给A分配，A满足之后再给B分配。
        2、静态资源分配法：根据已知的资源需求进行分配，优先满足已知的资源需求。

    死锁的避免可以通过银行家算法来避免，银行家算法运用到操作系统中，就是当一个新进程进入系统时，必须声明需要每种资源的最大数目，其数目不能超过系统所拥有的的资源总量。当进程请求一组资源时，系统必须首先确定是否有足够的资源分配给该进程，若有，再通过安全性检查算法（安全性检查算法指的是对于系统中的每一个进程，判断它以后需要的资源量不超过系统当前剩余资源量与当前所有进程所占有的资源量的之和，我们称系统是安全的，安全状态一定没有死锁发生，不安全状态不一定会发生死锁）进一步计算在将这些资源分配给进程后，是否会使系统处于不安全状态，如果不会才将资源分配给它，否则让进程等待。

    另外还可以采用鸵鸟策略对死锁情况不予理睬，在某些情况下可以进行硬等待来等到资源。

    系统“不可能发生死锁”的最小资源数公式：(每个进程需求资源数 - 1) * 进程数 + 1 <= 系统资源数
十五、进程资源图
    图例：
        圆圈P：进程P
        矩形圆圈R1：资源R1，内部有几个圆圈就有几个R1
        矩形圆圈R1->圆圈P：资源R1已经分配给进程P，1个箭头即分配了1个R1
        矩形圆圈R1<-圆圈P：进程P申请1个资源R1，1个箭头即申请了1个R1，等待R1分配
    先分析资源分配情况，列出剩余可用资源，再判断申请后进程能否成功执行，注意执行完成后会释放资源。如果让你判断进程资源图的某个进程节点是非阻塞节点还是阻塞节点，要注意这里看的是进程资源图的静态过程，不看动态过程，不要考虑A非阻塞释放了资源可以给B用，只有判断是不是死锁图才会有这样的动态过程。
    详情图例可看：https://www.bilibili.com/video/BV13U4y1E7oA，第P37节，进程资源图
十六、段页存储
    1、页式存储
        将程序与内存划分为同样大小的页，以页为单位将程序调入内存，具体的划分页号（逻辑）和实际内存中的页帧号（物理）的映射关系被记录在一张页表中。
        
        页表由页号，理块号（物理块号又称页帧号），状态位（是否在内存中），访问位（最近是否被访问），修改位（内容是否被修改过）组成。

        逻辑地址 = 页号 拼接 页内地址
        物理地址 = 页帧号 拼接 页内地址

        逻辑地址转物理地址，其中页内地址是不变的，只需要查页表将页号转成页帧号即可，例如：
            页式存储系统中，每个页的大小为4KB，根据主存编址计算公式，
                总容量 = 存储单元个数 * 编址内容
            没有告诉编址内容，默认按字节编址，也就是每个存储单元为1B，总共有4KB的总容量，则存储单元个数有4K个，也就是4096个，对于4096个也就是2^12个存储单元进行编址，这个容量需要12个二进制来进行地址编码，题目给出了已知的逻辑地址，
                10 1100 1101 1110
            已知编址只需要12位，所以最高两位10就代表的是页号，也就是2，通过查表得到页帧号，将页帧号转换成二进制拼接在页内地址之前就可以得出物理地址。

        页式存储的优点是内存利用率高，碎片小，分配及管理简单。
        页式存储的缺点是增加了系统开销，并且可能会产生抖动现象（某一个页被经常的调入调出内存，比如一段连续的代码被从中间截断分页了，两个页面其中一个在用前又被淘汰了，那么就可能导致淘汰的那个页面频繁的调入调出内存）。

        如果在分页的过程中，分出的页不够用，就会发生缺页中断，此时会将已有的页从内存中淘汰出去，然后将新的页调入进来解决缺页的问题。

        页淘汰原则：
            （1）淘汰访问位为0（依据时间局部性原理，如果一个页最近被访问过，那么它在将来很有可能会再次被访问）。
            （2）如果多个访问位为0，就淘汰修改位为0的。

        页置换算法：
            （1）最优算法：理想型的算法，对于一个事件发生前无法决定哪种情况最优，但可以用作基准算法来对比其他算法。
            （2）随机算法。
            （3）先进先出算法：有可能会产生抖动现象。
            （4）最近最少使用算法：不会产生抖动现象，依据空间局部性原理，如果一个页最近被访问过，那么这个页临近的页很有可能很快也被访问。
    2、段式存储
        在页式存储中，很有可能会出现将一个连续的代码段从中间进行拆开分页，这会变成两个页AB，假如调入A到内存中，但是B被淘汰了，这就会导致B被重复调入，为了解决这种逻辑上连续，但是调用上分散的情况，可以使用段式存储。

        段式存储按用户作业中的自然段来划分逻辑空间，然后调入内存，段的长度可以不一样。逻辑空间和物理空间的映射被记录在一张段表中。

        段表由段号，段长，基址组成。

        逻辑地址由段号，段内偏移量组成（段内偏移量不能超过段长，称为合法段地址，否则为非法段地址）。

        逻辑地址转物理地址，通过段号在段表中查到基址位置，然后用基址加上段内偏移量即可得到物理地址。

        段式存储的优点是多道程序共享内存，各段程序修改互不影响。
        段式存储的缺点是内存利用率低，内存碎片浪费大。
    3、段页式存储
        段式存储与页式存储的综合体。先分段，再分页。一个程序有若干个段，每个段中可以有若干页，每个页的大小相同，但每个段的大小不同。具体计算参考上面。
十七、磁盘管理
十八、IO管理软件
十九、文件管理
    1、文件相关概念
    2、树形目录结构
    3、位示图
    4、索引文件
二十、作业管理